---
import { getRelativeLocaleUrl } from "astro:i18n";
import { getLangFromUrl, useTranslations } from "../i18n/utils.ts";
import { ui } from "../i18n/ui.ts";

const currentLocale = getLangFromUrl(Astro.url);
const t = useTranslations(currentLocale);
const path = Astro.url.pathname.replace(new RegExp(`^/${currentLocale}`), "");

const allLocales = Object.entries(ui).map(
    ([locale, { language, flag, tooltipPrefix }]) => ({
        locale,
        label: language,
        flag,
        tooltipPrefix,
    }),
);

const currentLang = allLocales.find((lang) => lang.locale === currentLocale);
---

<div class="language-switcher">
    <div class="current-lang-btn" title={t("tooltipPrefix")}>
        {currentLang?.flag}
    </div>
    <div class="language-menu">
        <ul>
            {
                allLocales.map((lang) => (
                    <li>
                        <a
                            href={getRelativeLocaleUrl(lang.locale, path)}
                            class:list={[
                                "lang-option",
                                { active: lang.locale === currentLocale },
                            ]}
                            data-astro-reload
                        >
                            <span class="flag">{lang.flag}</span>
                            <span class="label">{lang.label}</span>
                        </a>
                    </li>
                ))
            }
        </ul>
    </div>
</div>

<style>
    .language-switcher {
        position: fixed;
        bottom: 92px;
        left: 0;
        z-index: 110;
    }

    .current-lang-btn {
        width: 36px;
        height: 36px;
        border: 1px solid var(--color-primary-alpha);
        border-left: none;
        border-radius: 0 9999px 9999px 0;
        background: rgba(28, 28, 28, 0.6);
        box-shadow: var(--shadow-subtle);
        cursor: pointer;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 1.3rem;
        transition: transform 0.3s ease;
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
    }

    .language-switcher:hover .current-lang-btn {
        transform: scale(1.1);
    }

    .language-menu {
        visibility: hidden;
        opacity: 0;
        position: absolute;
        left: 0.75rem;
        bottom: 120%;
        padding: 0.8rem;
        background: rgba(28, 28, 28, 0.6);
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        border-radius: 8px;
        border: 1px solid var(--color-primary-alpha);
        box-shadow: var(--shadow-glass);
        transition:
            opacity 0.3s ease,
            transform 0.3s ease;
        transform: translateY(10px);
        width: max-content;
    }

    .language-switcher:hover .language-menu {
        visibility: visible;
        opacity: 1;
        transform: translateY(0);
    }

    .language-menu ul {
        list-style: none;
        padding: 0;
        margin: 0;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .lang-option {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 0.4rem 0.8rem;
        border-radius: 6px;
        text-decoration: none;
        color: var(--color-light);
        font-family: var(--font-ui);
        transition: background-color 0.2s ease;
    }

    .lang-option:hover {
        background-color: rgba(0, 255, 102, 0.2);
    }

    .lang-option.active {
        font-weight: bold;
        color: var(--color-primary-light);
    }

    @media (min-width: 768px) {
        .language-switcher {
            bottom: 1.5rem;
            left: 2rem;
        }

        .current-lang-btn {
            border-radius: 9999px;
            border: 1px solid var(--color-primary-alpha);
            width: 48px;
            height: 48px;
        }

        .language-menu {
            bottom: calc(100% + 0.5rem);
            left: 0;
            transform: none;
        }
    }
</style>

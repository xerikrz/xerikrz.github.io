---
import { useTranslations } from "../i18n/utils.ts";
import { languagesList } from "../i18n/ui.ts";
const currentLocale = Astro.currentLocale || "en";
const t = useTranslations(currentLocale as keyof typeof languagesList);

import InstagramIcon from "../components/icons/InstagramIcon.astro";
import KaggleIcon from "../components/icons/KaggleIcon.astro";
import LinkedInIcon from "../components/icons/LinkedInIcon.astro";
import GithubIcon from "../components/icons/GithubIcon.astro";

const socialIcons = {
    github: GithubIcon,
    linkedin: LinkedInIcon,
    instagram: InstagramIcon,
    kaggle: KaggleIcon,
};

const {
    username = "@username",
    socials = [
        {
            name: "LinkedIn",
            url: "https://linkedin.com/in/username",
        },
        {
            name: "GitHub",
            url: "https://github.com/username",
        },
        {
            name: "Kaggle",
            url: "https://www.kaggle.com/username",
        },
        {
            name: "Instagram",
            url: "https://instagram.com/username",
        },
        {
            name: "LinkedIn",
            url: "https://linkedin.com/in/username",
        },
        {
            name: "GitHub",
            url: "https://github.com/username",
        },
        {
            name: "Kaggle",
            url: "https://www.kaggle.com/username",
        },
        {
            name: "Instagram",
            url: "https://instagram.com/username",
        },
    ],
} = Astro.props;
---

<section id="contact">
    <div class="container">
        <h2 class="section-title">{t("contact.section.title")}</h2>
        <p class="section-subtitle">{t("contact.section.subtitle")}</p>

        <div class="contact-graph">
            <div class="node-center-layer">
                <div class="node-center">
                    <span class="node-center-initials">{username}</span>
                </div>
            </div>

            <div class="contact-nodes-layer">
                {
                    socials.map((social) => {
                        const IconComponent =
                            socialIcons[social.name.toLowerCase()];
                        return (
                            <a href={social.url} class="node" target="_blank">
                                <div class="node-icon">
                                    {IconComponent && <IconComponent />}
                                </div>
                            </a>
                        );
                    })
                }
            </div>
        </div>
    </div>
</section>

<style>
    #contact {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 2rem 0;
    }

    .container {
        text-align: center;
        width: 100%;
        max-width: 500px;
        margin: 0 auto;
    }

    .contact-graph {
        position: relative;
        width: 300px;
        height: 300px;
        margin: 3rem auto 0;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .node-center-layer {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 2;
    }

    .node-center {
        border-radius: 50%;
        border: 2px solid var(--color-primary);
        background: var(--color-secondary);
        display: inline-flex;
        justify-content: center;
        align-items: center;
        animation:
            glow 6s ease-in-out infinite,
            pulse-and-rotate 6s ease-in-out infinite;
        padding: 0.75rem;
        aspect-ratio: 1 / 1;
    }

    .node-center-initials {
        font-family: var(--font-primary);
        font-size: 1.3rem;
        font-weight: 700;
        user-select: none;
        background: linear-gradient(
            110deg,
            var(--color-primary) 40%,
            var(--color-white) 50%,
            var(--color-primary) 60%
        );
        background-size: 200% 100%;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        animation:
            metallic-sheen 3s linear infinite,
            glow-text 3s ease-in-out infinite;
    }

    .contact-nodes-layer {
        position: absolute;
        top: 50%;
        left: 50%;
        width: 100%;
        height: 100%;
        transform: translate(-50%, -50%);
        z-index: 1;
    }

    .node {
        position: absolute;
        top: 50%;
        left: 50%;
        width: 45px;
        height: 45px;
        border-radius: 50%;
        background: var(--color-gray-100);
        border: var(--border-glass);
        display: flex;
        align-items: center;
        justify-content: center;
        translate: -50% -50%;
        transition: all 0.4s ease;
    }

    .node-icon {
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .node-icon svg {
        width: 24px;
        height: 24px;
        fill: var(--color-primary-dark);
        transition: fill 0.4s ease;
    }

    .node:hover {
        background: var(--color-primary);
        transform: scale(1.1);
        box-shadow: 0 0 15px var(--color-primary-light);
    }

    .node:hover .node-icon svg {
        fill: var(--color-light);
    }

    .node-highlight {
        background: var(--color-primary);
        transform: scale(1.1);
        box-shadow: 0 0 15px var(--color-primary-light);
    }

    .node-highlight .node-icon svg {
        fill: var(--color-light);
    }

    @keyframes pulse-and-rotate {
        0%,
        50%,
        100% {
            transform: scale(1) rotate(0deg);
        }
        25% {
            transform: scale(1.2) rotate(20deg);
        }
        75% {
            transform: scale(1.2) rotate(-20deg);
        }
    }

    @media (min-width: 768px) {
        .contact-graph {
            width: 350px;
            height: 350px;
        }

        .node-center {
            padding: 1rem;
        }
    }

    @media (min-width: 1024px) {
        .contact-graph {
            width: 400px;
            height: 400px;
        }

        .node-center {
            padding: 1.5rem;
        }
    }
</style>

<script>
    function setupOrbitAnimation() {
        const nodes = document.querySelectorAll(".contact-nodes-layer .node");
        if (nodes.length === 0) return;

        const total = nodes.length;
        const duration = 18;

        let radius;
        if (window.matchMedia("(min-width: 1024px)").matches) {
            radius = 160;
        } else if (window.matchMedia("(min-width: 768px)").matches) {
            radius = 140;
        } else {
            radius = 120;
        }

        const oldStyle = document.getElementById("orbit-animations");
        if (oldStyle) {
            oldStyle.remove();
        }

        const styleElement = document.createElement("style");
        styleElement.id = "orbit-animations";

        nodes.forEach((_, index) => {
            const angle = (360 / total) * index;
            const animationName = `orbit-${index}`;

            const nodeElement = nodes[index] as HTMLElement;
            nodeElement.style.animation = `${animationName} ${duration}s linear infinite`;

            styleElement.innerHTML += `
                    @keyframes ${animationName} {
                        from { transform: rotate(${angle}deg) translateX(${radius}px) rotate(-${angle}deg); }
                        to { transform: rotate(${angle + 360}deg) translateX(${radius}px) rotate(-${angle + 360}deg); }
                    }`;
        });
        document.head.appendChild(styleElement);
    }

    function setupRandomHighlighting() {
        const nodes = document.querySelectorAll(".contact-nodes-layer .node");
        if (nodes.length === 0) return;

        let lastHighlightedNode = null;

        setInterval(() => {
            if (lastHighlightedNode) {
                lastHighlightedNode.classList.remove("node-highlight");
            }

            const randomIndex = Math.floor(Math.random() * nodes.length);
            const randomNode = nodes[randomIndex];
            randomNode.classList.add("node-highlight");

            lastHighlightedNode = randomNode;
        }, 600);
    }

    document.addEventListener("DOMContentLoaded", setupOrbitAnimation);
    document.addEventListener("DOMContentLoaded", setupRandomHighlighting);
    window.addEventListener("resize", setupOrbitAnimation);
</script>

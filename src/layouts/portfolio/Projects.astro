---
import { useTranslations } from "../../i18n/utils.ts";
const currentLocale = Astro.currentLocale || "en";
const t = useTranslations(currentLocale as keyof typeof languagesList);

const defaultProject = {
    title: "Coming Soon",
    alt: "Coming Soon Project",
    description:
        "This project will be available soon. Stay tuned to see it shortly.",
    img: "https://i.giphy.com/3oEjI6SIIHBdRxXI40.webp",
    tags: ["Coming Soon", "Portfolio", "Soon"],
    link: "#",
};

const defaultProjects = Array.from({ length: 10 }, (_, index) => ({
    ...defaultProject,
    title: `${defaultProject.title} #${index + 1}`,
}));

const { projects: incomingProjects } = Astro.props;

const projects =
    Array.isArray(incomingProjects) && incomingProjects.length > 0
        ? incomingProjects
        : defaultProjects;
---

<section id="projects">
    <div class="container">
        <h2 class="section-title">{t("projects.section.title")}</h2>
        <div class="carousel-wrapper">
            <div class="projects-carousel-container">
                <div class="projects-grid">
                    {
                        projects &&
                            projects.length > 0 &&
                            projects.map((project) => (
                                <a
                                    href={project.link}
                                    class="project-card-link"
                                >
                                    <div class="project-card">
                                        <div class="project-img-container">
                                            <img
                                                src={project.img}
                                                alt={project.alt}
                                            />
                                        </div>
                                        <div class="project-info-card">
                                            <h3>{project.title}</h3>
                                            <p>{project.description}</p>
                                            <ul class="project-tags">
                                                {project.tags.map((tag) => (
                                                    <li key={tag}>{tag}</li>
                                                ))}
                                            </ul>
                                        </div>
                                    </div>
                                </a>
                            ))
                    }
                </div>
            </div>
            <button id="project-scroll-left" class="carousel-arrow">
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                >
                    <path d="m15 18-6-6 6-6"></path>
                </svg>
            </button>
            <button id="project-scroll-right" class="carousel-arrow">
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                >
                    <path d="m9 18 6-6-6-6"></path>
                </svg>
            </button>
        </div>
    </div>
</section>

<style>
    #projects {
        padding: 2rem 0;
    }

    .carousel-wrapper {
        position: relative;
        margin: 0 -2rem;
    }

    .projects-carousel-container {
        padding: 0;
    }

    .projects-carousel-container::before {
        position: absolute;
        content: "";
        inset: 0;
        z-index: 2;
        pointer-events: none;
        background: linear-gradient(
            to right,
            var(--color-secondary) 5%,
            transparent 15%,
            transparent 85%,
            var(--color-secondary) 95%
        );
    }

    .projects-grid {
        display: flex;
        gap: 1.5rem;
        padding: 3rem 0;
        overflow-x: auto;
    }

    .projects-grid::-webkit-scrollbar {
        display: none;
    }

    .project-card-link {
        display: block;
        color: inherit;
    }

    .project-card {
        flex-shrink: 0;
        width: 250px;
        background: var(--color-gray-100);
        border-radius: 15px;
        overflow: hidden;
        box-shadow: var(--shadow-subtle);
        display: flex;
        flex-direction: column;
        height: 100%;
        transform: scale(0.9);
        transition: transform 0.4s cubic-bezier(0.19, 1, 0.22, 1);
        animation: glow 3s ease-in-out infinite;
        cursor: pointer;
    }

    .project-card-link:hover .project-card {
        transform: scale(1);
        z-index: 3;
    }

    .project-img-container {
        width: 100%;
        height: 150px;
    }

    .project-img-container img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        filter: grayscale(100%);
    }

    .project-info-card {
        padding: 1.2rem;
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        gap: 0.5rem;
    }

    .project-info-card h3 {
        font-family: var(--font-primary);
        color: var(--color-primary-light);
    }

    .project-tags {
        list-style: none;
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-top: auto;
    }

    .project-tags li {
        font-size: 0.75rem;
        background: rgba(255, 255, 255, 0.05);
        padding: 0.2rem 0.6rem;
        border-radius: 50px;
        border: var(--border-glass);
        color: var(--color-primary-light);
    }

    .carousel-arrow {
        position: absolute;
        z-index: 5;
        top: 50%;
        transform: translateY(-50%);
        padding: 0.75rem;
        background-color: rgba(38, 38, 38, 0.8);
        border-radius: 9999px;
        color: var(--color-primary);
        transition: all 0.2s ease-in-out;
        border: none;
        cursor: pointer;
        display: block;
    }

    .carousel-arrow:hover {
        background-color: #404040;
        color: var(--color-primary-light);
    }

    .carousel-arrow svg {
        width: 1.25rem;
        height: 1.25rem;
    }

    #project-scroll-left {
        left: 0.5rem;
        transform: translateY(-50%);
    }

    #project-scroll-right {
        right: 0.5rem;
        transform: translateY(-50%);
    }

    @media (min-width: 768px) {
        .carousel-wrapper {
            margin: 0;
        }
        .projects-grid {
            gap: 2rem;
            padding: 3rem 0;
        }

        .project-card {
            width: 280px;
        }

        .carousel-arrow {
            display: block;
        }

        #project-scroll-left {
            left: 0;
            transform: translate(-50%, -50%);
        }

        #project-scroll-right {
            right: 0;
            transform: translate(50%, -50%);
        }
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const projectsGrid = document.querySelector(".projects-grid");
        if (!projectsGrid) return;

        let projectCards = Array.from(projectsGrid.children);
        const minCardsForLoop = 6;

        while (
            projectCards.length > 0 &&
            projectCards.length < minCardsForLoop
        ) {
            projectCards.forEach((card) => {
                projectsGrid.appendChild(card.cloneNode(true));
            });
            projectCards = Array.from(projectsGrid.children);
        }

        projectCards.forEach((card) => {
            const clone = card.cloneNode(true);
            clone.setAttribute("aria-hidden", "true");
            projectsGrid.appendChild(clone);
        });

        const scrollLeftBtn = document.getElementById("project-scroll-left");
        const scrollRightBtn = document.getElementById("project-scroll-right");

        if (!scrollLeftBtn || !scrollRightBtn) return;

        let autoScrollInterval;
        const scrollSpeed = 1;

        function startAutoScroll() {
            stopAutoScroll();
            autoScrollInterval = requestAnimationFrame(function scroll() {
                projectsGrid.scrollLeft += scrollSpeed;

                if (projectsGrid.scrollLeft >= projectsGrid.scrollWidth / 2) {
                    projectsGrid.scrollLeft = 0;
                }
                autoScrollInterval = requestAnimationFrame(scroll);
            });
        }

        function stopAutoScroll() {
            cancelAnimationFrame(autoScrollInterval);
        }

        function scrollCarousel(direction) {
            stopAutoScroll();
            const scrollAmount = 300 * (direction === "left" ? -1 : 1);
            projectsGrid.scrollBy({ left: scrollAmount, behavior: "smooth" });
        }

        scrollLeftBtn.addEventListener("click", () => scrollCarousel("left"));
        scrollRightBtn.addEventListener("click", () => scrollCarousel("right"));

        projectsGrid.addEventListener("mouseenter", stopAutoScroll);
        projectsGrid.addEventListener("touchstart", stopAutoScroll, {
            passive: true,
        });

        projectsGrid.addEventListener("mouseleave", startAutoScroll);
        projectsGrid.addEventListener("touchend", startAutoScroll);
        projectsGrid.addEventListener("touchcancel", startAutoScroll);

        startAutoScroll();
    });
</script>
